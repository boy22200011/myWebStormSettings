<templateSet group="Vue">
  <template name="vpuglist" value="&lt;template lang=&quot;pug&quot;&gt;&#10;  cp-card(ref='cpcard', :title='cpCardTitle.title', @searching='searching')&#10;    template(slot='searchBar')&#10;      el-collapse(v-model='search.activeNames')&#10;        el-collapse-item(title='', name='1')&#10;          el-form(label-position='top', label-width='80px', :inline='true')&#10;            el-row(:gutter='20')&#10;              el-col(:sm='12', :md='8', :lg='6')&#10;                el-form-item(:label=&quot;$t('Payment.Provider.Fields.Name')&quot;, prop='Name')&#10;                  el-input(v-model='search.params.Name')&#10;              el-col(:sm='12', :md='8', :lg='6')&#10;                el-form-item(:label=&quot;$t('Payment.Provider.Fields.Status')&quot;)&#10;                  el-select(v-model='search.params.Status', :placeholder=&quot;$t('Shared.PleaseChoose')&quot;)&#10;                    el-option(:label=&quot;$t('Shared.Enable')&quot;, :value='1')&#10;                      el-option(:label=&quot;$t('Shared.Disable')&quot;, :value='0')&#10;    template(slot='cardBar')&#10;      el-button(disabled='') {{ 'After ' + reloadObject.reloadTime + 's' + ' Reload' }}&#10;      el-button(style='float: right;', type='primary', @click=&quot;openDialog('', 'add')&quot;) {{ $t('Shared.Add') }}&#10;    template(slot='body')&#10;      sub-table(v-loading='table.loading', :data-source='table.Data', :fields='table.columns', :is-muti-check-box='false', :formatter='formatter', :is-operator-show=&quot;''&quot;, :is-other-show=&quot;''&quot;, @getcheckboxresult='getCheckBoxResult')&#10;        template(slot='operator')&#10;          el-table-column(min-width='300px', :align=&quot;'center'&quot;, :label=&quot;$t('Shared.Operator')&quot;)&#10;            template(slot-scope='entry')&#10;              el-row.table-operator-el-row(:gutter='20')&#10;                el-button(@click=&quot;openDialog(entry.row,'edit')&quot;) {{ $t('Shared.Edit') }}&#10;      sub-pagination(:total='table.pageTotaleCount', :page='search.params.PageIndex', :limit='search.params.PageSize', @pagination='changePage')&#10;    template(slot=&quot;dialog&quot;)&#10;      add(v-if='dialog.add.show', :show-dialog='dialog.add.show', :title='dialog.add.title', :dialog-name='dialog.add.name', :item-object='dialog.add.itemObject', @closeDialog='closeDialog')&#10;      edit(v-if='dialog.edit.show', :show-dialog='dialog.edit.show', :title='dialog.edit.title', :dialog-name='dialog.edit.name', :item-object='dialog.edit.itemObject', @closeDialog='closeDialog')&#10;&lt;/template&gt;&#10;&#10;&lt;script&gt;&#10;// import API from '@/api'&#10;// import Add from './Add'&#10;// import Edit from './Edit'&#10;export default {&#10;  components: {&#10;    // Add,&#10;    // Edit&#10;  },&#10;  data() {&#10;    return {&#10;      // 計時器&#10;      reloadObject: {&#10;        myInterval: null,&#10;        reloadTime: 60, // s&#10;        loopTime: 1000 // ms&#10;      },&#10;      cpCardTitle: {&#10;        title: 'Payment.Provider.Title'&#10;      },&#10;      search: {&#10;        params: {&#10;          Name: '',&#10;          Status: null,&#10;          PageIndex: 1,&#10;          PageSize: 20&#10;        },&#10;        activeNames: ['1']&#10;      },&#10;      table: {&#10;        Data: [],&#10;        columns: [&#10;          {&#10;            name: 'Name',&#10;            locale: '',&#10;            width: 150,&#10;            show: true,&#10;            customField: false&#10;          },&#10;          {&#10;            name: 'Status',&#10;            locale: '',&#10;            width: 150,&#10;            show: true,&#10;            customField: false&#10;          }&#10;        ],&#10;        pageTotaleCount: 0,&#10;        loading: false&#10;      },&#10;      dialog: {&#10;        add: {&#10;          name: 'add',&#10;          title: '',&#10;          show: false,&#10;          itemObject: null&#10;        },&#10;        edit: {&#10;          name: 'edit',&#10;          title: '',&#10;          show: false,&#10;          itemObject: null&#10;        }&#10;      },&#10;      mutiCheckBox: {&#10;        array: []&#10;      },&#10;      button: {&#10;        popover: {&#10;          show: false&#10;        }&#10;      }&#10;    }&#10;  },&#10;  watch: {&#10;    LastModifyDateTime(newVal, oldVal) {&#10;      if (newVal) {&#10;        this.search.params.ModifyStartDate = newVal[0]&#10;        this.search.params.ModifyEndDate = newVal[1]&#10;      } else {&#10;        this.search.params.ModifyStartDate = null&#10;        this.search.params.ModifyEndDate = null&#10;      }&#10;    },&#10;    CreateDateTime(newVal, oldVal) {&#10;      if (newVal) {&#10;        this.search.params.CreateStartDate = newVal[0]&#10;        this.search.params.CreateEndDate = newVal[1]&#10;      } else {&#10;        this.search.params.CreateStartDate = null&#10;        this.search.params.CreateEndDate = null&#10;      }&#10;    }&#10;  },&#10;  created() {&#10;    var self = this&#10;    if (self.reloadObject.myInterval) {&#10;      self.clearCustomInterval(self.reloadObject.myInterval)&#10;    }&#10;  },&#10;  mounted() {&#10;    this.setCustomInterval()&#10;  },&#10;  methods: {&#10;    formatter(row, column, cellValue, index) {&#10;      var field = column.property&#10;      switch (field) {&#10;        case 'Status':&#10;          if (cellValue) {&#10;            // cellValue = this.$t('Shared.Status.Payment.' + cellValue)&#10;          }&#10;          break&#10;      }&#10;      return cellValue&#10;    },&#10;    openDialog(entry, action) {&#10;      switch (action) {&#10;        case 'add':&#10;          this.dialog.add.show = true&#10;          break&#10;        case 'edit':&#10;          this.dialog.edit.show = true&#10;          this.dialog.edit.itemObject = entry&#10;          break&#10;      }&#10;    },&#10;    closeDialog(params) {&#10;      switch (params.dialogName) {&#10;        case 'add':&#10;          this.dialog.add.show = false&#10;          break&#10;        case 'edit':&#10;          this.dialog.edit.show = false&#10;          break&#10;      }&#10;      this.dataBind()&#10;    },&#10;    searching() {&#10;      if (this.reloadObject.myInterval) {&#10;        this.clearCustomInterval(this.reloadObject.myInterval)&#10;        this.setCustomInterval()&#10;      }&#10;      this.search.params.PageIndex = 1&#10;      this.$refs.cpcard.lockBtn(true)&#10;      this.dataBind()&#10;    },&#10;    dataBind() {$END$&#10;      // this.table.loading = true&#10;      // var formData = {&#10;      //  Name: this.search.params.Name,&#10;      //  Code: this.search.params.Code,&#10;      //  Status: this.search.params.Status&#10;      // }&#10;      // API.Provider.GetMany(formData).then(response =&gt; {&#10;      //  const { Data } = response&#10;      //  this.table.Data = Data&#10;      //  this.table.loading = false&#10;      //  this.$refs.cpcard.lockBtn(false)&#10;      // }).catch(() =&gt; {&#10;      //   this.table.loading = false&#10;      //  this.$refs.cpcard.lockBtn(false)&#10;      // })&#10;    },&#10;    changePage(params) {&#10;      this.search.params.PageIndex = params.page&#10;      this.search.params.PageSize = params.limit&#10;      this.dataBind()&#10;    },&#10;    getCheckBoxResult(array) {&#10;      this.mutiCheckBox.array = array&#10;    },&#10;    setCustomInterval() {&#10;      var self = this&#10;      if (self.reloadObject.myInterval) {&#10;        self.clearCustomInterval(self.reloadObject.myInterval)&#10;      }&#10;      self.reloadObject.myInterval = setInterval(() =&gt; {&#10;        self.reloadObject.reloadTime--&#10;        if (self.reloadObject.reloadTime === 0) {&#10;          self.reloadObject.reloadTime = 60&#10;          self.$refs.cpcard.lockBtn(true)&#10;          self.dataBind()&#10;        }&#10;      }, self.reloadObject.loopTime)&#10;    },&#10;    clearCustomInterval(myInterval) {&#10;      this.reloadObject.reloadTime = 60&#10;      clearInterval(myInterval)&#10;    }&#10;  },&#10;  destroyed() {&#10;    var self = this&#10;    if (self.reloadObject.myInterval) {&#10;      self.clearCustomInterval(self.reloadObject.myInterval)&#10;    }&#10;  }&#10;}&#10;&lt;/script&gt;&#10;&#10;&lt;style lang=&quot;scss&quot; scoped&gt;&#10;&#10;&lt;/style&gt;&#10;" description="vue for pug" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="VUE_TOP_LEVEL" value="true" />
    </context>
  </template>
  <template name="vpugdialog" value="&lt;template lang=&quot;pug&quot;&gt;&#10;  el-dialog(:title='realTitle', :visible.sync='isOpen', width='50%', top='5vh', :before-close='close', center='', :close-on-click-modal='false')&#10;    el-form(ref='form', :model='form', label-width='80px', label-position='top', :rules='rules', status-icon='')&#10;      el-form-item(:label=&quot;$t('Payment.Provider.Fields.Name')&quot;, prop='Name')&#10;        el-input(v-model='form.Name', maxlength=&quot;20&quot;)&#10;      el-form-item(:label=&quot;$t('Payment.Provider.Fields.Code')&quot;, prop='Code')&#10;        el-input(v-model='form.Code', maxlength=&quot;20&quot;)&#10;    span.dialog-footer(slot='footer')&#10;      el-button(@click='close') {{ $t('Shared.Cancel') }}&#10;      el-button(type='primary', @click='submit') {{ $t('Shared.Submit') }}&#10;&lt;/template&gt;&#10;&#10;&lt;script&gt;&#10;export default {&#10;  components: {},&#10;  props: {&#10;    title: {&#10;      type: String,&#10;      default: ''&#10;    },&#10;    dialogName: {&#10;      type: String,&#10;      default: ''&#10;    },&#10;    showDialog: {&#10;      type: Boolean,&#10;      default: false&#10;    },&#10;    itemObject: {&#10;      type: Object || Array,&#10;      default: []&#10;    }&#10;  },&#10;  data() {&#10;    return {&#10;      isOpen: false,&#10;      result: {&#10;        dialogName: this.dialogName,&#10;        param: ''&#10;      },&#10;      form: {&#10;        Name: null,&#10;        Code: null,&#10;        Status: false&#10;      },&#10;      rules: {&#10;        Name: [&#10;          {&#10;            validator: (rule, value, callback) =&gt; {&#10;              if (!value) {&#10;                callback(new Error(this.$t('Shared.PleaseType') + this.$t('Payment.Provider.Fields.Name')))&#10;              } else {&#10;                callback()&#10;              }&#10;            },&#10;            trigger: 'blur',&#10;            required: true&#10;          }&#10;        ],&#10;        Code: [&#10;          {&#10;            validator: (rule, value, callback) =&gt; {&#10;              if (!value) {&#10;                callback(new Error(this.$t('Shared.PleaseType') + this.$t('Payment.Provider.Fields.Code')))&#10;              } else {&#10;                callback()&#10;              }&#10;            },&#10;            trigger: 'blur',&#10;            required: true&#10;          }&#10;        ]&#10;      }&#10;    }&#10;  },&#10;  computed: {&#10;    realTitle: {&#10;      get() {&#10;        return this.title&#10;      }&#10;    }&#10;  },&#10;  created() {&#10;    this.isOpen = this.showDialog&#10;  },&#10;  mounted() {&#10;    this.form.Name = this.itemObject.Name&#10;    this.form.Code = this.itemObject.Code&#10;  },&#10;  methods: {&#10;    close() {&#10;      this.isOpen = false&#10;      this.$emit('closeDialog', this.result)&#10;    },&#10;    submit() {&#10;      this.$refs.form.validate(valid =&gt; {&#10;        if (valid) {&#10;          // var formData = {&#10;          //   Name: this.form.Name,&#10;          //   Code: this.form.Code&#10;          // }&#10;          // OpinionService.Add(formData)&#10;          //   .then(response =&gt; {&#10;          //     this.$message.success({&#10;          //       message: this.$t('ErrorCode.' + response.ErrorCode)&#10;          //     })&#10;          //     this.close()&#10;          //   })&#10;        } else {&#10;          console.log('error submit!!')&#10;          return false&#10;        }&#10;      })&#10;    }&#10;  }&#10;}&#10;&lt;/script&gt;&#10;&#10;&lt;style lang=&quot;scss&quot; scoped&gt;&#10;&lt;/style&gt;&#10;" description="vue elementUI MessageBox" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="VUE_TOP_LEVEL" value="true" />
    </context>
  </template>
</templateSet>